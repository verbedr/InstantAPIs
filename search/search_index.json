{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":"python","separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This article contains two different ways to get an instant API: An API based on a DbContext , it will generate the routes it needs given a database class. There are two implementations of this: Reflection and a source generator. An API based on a JSON file. DbContext based API \u00b6 A proof-of-concept library that generates Minimal API endpoints for an Entity Framework context. Right now, there are two implementations of this: one that uses Reflection (this is the one currently in the NuGet package), the other uses a source generator. Let's see how both of them work. For a given Entity Framework context, MyContext public class MyContext : DbContext { public MyContext ( DbContextOptions < MyContext > options ) : base ( options ) {} public DbSet < Contact > Contacts => Set < Contact >(); public DbSet < Address > Addresses => Set < Address >(); } We can generate all of the standard CRUD API endpoints with the Reflection approach using this syntax in Program.cs var builder = WebApplication . CreateBuilder ( args ); builder . Services . AddSqlite < MyContext >( \"Data Source=contacts.db\" ); var app = builder . Build (); app . MapInstantAPIs < MyContext >(); app . Run (); Now we can navigate to /api/Contacts and see all of the Contacts in the database. We can filter for a specific Contact by navigating to /api/Contacts/1 to get just the first contact returned. We can also post to /api/Contacts and add a new Contact to the database. Since there are multiple DbSet , you can make the same calls to /api/Addresses . You can also customize the APIs if you want app . MapInstantAPIs < MyContext >( config => { config . IncludeTable ( db => db . Contacts , ApiMethodsToGenerate . All , \"addressBook\" ); }); This specifies that the all of the CRUD methods should be created for the Contacts table, and it prepends the routes with addressBook . The source generator approach has an example in the WorkingApi.Generators project (at the moment a NuGet package hasn't been created for this implementation). You specify which DbContext classes you want to map with the InstantAPIsForDbContextAttribute , For each context, an extension method named Map{DbContextName}ToAPIs is created. The end result is similar to the Reflection approach: [assembly: InstantAPIsForDbContext(typeof(MyContext))] var builder = WebApplication . CreateBuilder ( args ); builder . Services . AddSqlite < MyContext >( \"Data Source=contacts.db\" ); var app = builder . Build (); app . MapMyContextToAPIs (); app . Run (); You can also do customization as well app . MapMyContextToAPIs ( options => options . Include ( MyContext . Contacts , \"addressBook\" , ApisToGenerate . Get )); Feel free to try both approaches and let Fritz know if you have any issues with either one of them. The intent is to keep feature parity between the two for the forseable future. Demo \u00b6 Check out Fritz giving a demo, showing the advantage of InstantAPIs on YouTube: https://youtu.be/vCSWXAOEpBo A JSON based API \u00b6 An API will be generated based on JSON file, for now it needs to be named mock.json . A typical content in mock.json looks like so: { \"products\" : [{ \"id\" : 1 , \"name\" : \"pizza\" }, { \"id\" : 2 , \"name\" : \"pineapple pizza\" }, { \"id\" : 3 , \"name\" : \"meat pizza\" }], \"customers\" : [{ \"id\" : 1 , \"name\" : \"customer1\" }] } The above JSON will create the following routes: HTTP Verb Endpoint GET /products GET /products/{id} POST /products DELETE /products/{id} GET /customers GET /customers/{id} POST /customers DELETE /customers/{id} Demo \u00b6 To use this, do the following: Create a new minimal API, if you don't already have one: dotnet new web -o DemoApi -f net6.0 cd DemoApi Add the NuGet package for InstantAPIs : dotnet add package InstantAPIs --prerelease In Program.cs , add the following namespace: using Mock ; Create a file mock.json and give it for example the following content: { \"products\" : [{ \"id\" : 1 , \"name\" : \"pizza\" }] } Now add the following code for the routes to be created: app . UseJsonRoutes (); Here's an example program: using Mock ; var builder = WebApplication . CreateBuilder ( args ); var app = builder . Build (); app . MapGet ( \"/\" , () => \"Hello World!\" ); app . UseJsonRoutes (); app . Run ();","title":"Home"},{"location":"#dbcontext-based-api","text":"A proof-of-concept library that generates Minimal API endpoints for an Entity Framework context. Right now, there are two implementations of this: one that uses Reflection (this is the one currently in the NuGet package), the other uses a source generator. Let's see how both of them work. For a given Entity Framework context, MyContext public class MyContext : DbContext { public MyContext ( DbContextOptions < MyContext > options ) : base ( options ) {} public DbSet < Contact > Contacts => Set < Contact >(); public DbSet < Address > Addresses => Set < Address >(); } We can generate all of the standard CRUD API endpoints with the Reflection approach using this syntax in Program.cs var builder = WebApplication . CreateBuilder ( args ); builder . Services . AddSqlite < MyContext >( \"Data Source=contacts.db\" ); var app = builder . Build (); app . MapInstantAPIs < MyContext >(); app . Run (); Now we can navigate to /api/Contacts and see all of the Contacts in the database. We can filter for a specific Contact by navigating to /api/Contacts/1 to get just the first contact returned. We can also post to /api/Contacts and add a new Contact to the database. Since there are multiple DbSet , you can make the same calls to /api/Addresses . You can also customize the APIs if you want app . MapInstantAPIs < MyContext >( config => { config . IncludeTable ( db => db . Contacts , ApiMethodsToGenerate . All , \"addressBook\" ); }); This specifies that the all of the CRUD methods should be created for the Contacts table, and it prepends the routes with addressBook . The source generator approach has an example in the WorkingApi.Generators project (at the moment a NuGet package hasn't been created for this implementation). You specify which DbContext classes you want to map with the InstantAPIsForDbContextAttribute , For each context, an extension method named Map{DbContextName}ToAPIs is created. The end result is similar to the Reflection approach: [assembly: InstantAPIsForDbContext(typeof(MyContext))] var builder = WebApplication . CreateBuilder ( args ); builder . Services . AddSqlite < MyContext >( \"Data Source=contacts.db\" ); var app = builder . Build (); app . MapMyContextToAPIs (); app . Run (); You can also do customization as well app . MapMyContextToAPIs ( options => options . Include ( MyContext . Contacts , \"addressBook\" , ApisToGenerate . Get )); Feel free to try both approaches and let Fritz know if you have any issues with either one of them. The intent is to keep feature parity between the two for the forseable future.","title":"DbContext based API"},{"location":"#demo","text":"Check out Fritz giving a demo, showing the advantage of InstantAPIs on YouTube: https://youtu.be/vCSWXAOEpBo","title":"Demo"},{"location":"#a-json-based-api","text":"An API will be generated based on JSON file, for now it needs to be named mock.json . A typical content in mock.json looks like so: { \"products\" : [{ \"id\" : 1 , \"name\" : \"pizza\" }, { \"id\" : 2 , \"name\" : \"pineapple pizza\" }, { \"id\" : 3 , \"name\" : \"meat pizza\" }], \"customers\" : [{ \"id\" : 1 , \"name\" : \"customer1\" }] } The above JSON will create the following routes: HTTP Verb Endpoint GET /products GET /products/{id} POST /products DELETE /products/{id} GET /customers GET /customers/{id} POST /customers DELETE /customers/{id}","title":"A JSON based API"},{"location":"#demo_1","text":"To use this, do the following: Create a new minimal API, if you don't already have one: dotnet new web -o DemoApi -f net6.0 cd DemoApi Add the NuGet package for InstantAPIs : dotnet add package InstantAPIs --prerelease In Program.cs , add the following namespace: using Mock ; Create a file mock.json and give it for example the following content: { \"products\" : [{ \"id\" : 1 , \"name\" : \"pizza\" }] } Now add the following code for the routes to be created: app . UseJsonRoutes (); Here's an example program: using Mock ; var builder = WebApplication . CreateBuilder ( args ); var app = builder . Build (); app . MapGet ( \"/\" , () => \"Hello World!\" ); app . UseJsonRoutes (); app . Run ();","title":"Demo"}],"index":{"fieldVectors":[["title/",[0,1.694]],["text/",[1,0.839,2,0.839,3,1.161,4,0.839,5,0.839,6,0.839,7,0.129,8,0.133,9,0.715,10,0.533,11,0.862,12,0.382,13,0.831,14,0.831,15,1.026,16,1.026,17,1.026,18,1.161,19,1.026,20,0.715,21,0.631,22,1.839,23,0.53,24,0.53,25,0.53,26,0.512,27,0.631,28,0.831,29,0.831,30,1.026,31,0.53,32,0.382,33,0.715,34,0.824,35,0.53,36,0.631,37,0.715,38,0.53,39,0.831,40,0.831,41,0.53,42,1.49,43,1.161,44,0.543,45,0.44,46,0.917,47,0.53,48,1.49,49,1.026,50,1.161,51,0.831,52,0.53,53,1.026,54,1.525,55,0.824,56,0.831,57,1.026,58,1.026,59,0.337,60,0.53,61,0.831,62,1.161,63,0.53,64,0.512,65,0.824,66,0.892,67,0.824,68,0.631,69,0.58,70,0.631,71,0.631,72,0.862,73,0.831,74,0.831,75,1.026,76,0.831,77,0.831,78,0.986,79,0.631,80,0.917,81,0.831,82,0.631,83,0.831,84,0.831,85,0.53,86,0.53,87,0.53,88,0.53,89,0.53,90,0.631,91,0.777,92,0.631,93,0.53,94,0.53,95,0.53,96,0.53,97,0.53,98,0.777,99,0.831,100,0.831,101,0.53,102,0.831,103,0.53,104,1.026,105,0.53,106,0.831,107,0.831,108,0.46,109,0.53,110,0.53,111,0.631,112,0.53,113,0.53,114,0.53,115,0.53,116,0.53,117,0.53,118,0.53,119,0.53,120,0.46,121,0.53,122,0.53,123,0.53,124,0.53,125,0.53,126,0.53,127,0.831,128,0.53,129,0.53,130,0.53,131,0.53,132,0.53,133,0.53,134,0.53,135,0.512,136,0.53,137,0.53,138,0.53,139,0.53,140,0.53,141,0.53,142,0.53,143,0.53,144,0.53,145,0.337,146,0.53,147,0.53,148,0.512,149,0.53,150,0.53,151,0.631,152,0.53,153,0.53,154,0.631,155,0.53,156,0.512,157,0.53,158,0.715,159,0.631,160,0.777,161,0.631,162,0.715,163,0.831,164,0.53,165,0.53,166,0.53,167,0.53,168,0.53,169,0.53,170,0.512,171,0.53,172,0.777,173,0.53,174,0.53,175,0.831,176,0.831,177,0.831,178,0.53,179,0.53,180,0.831,181,0.53,182,0.53,183,0.831,184,0.53,185,0.53,186,0.53,187,0.53,188,0.53,189,0.831,190,0.831,191,0.53,192,0.831,193,0.53,194,0.53,195,0.53,196,0.53,197,0.53,198,0.53,199,0.53]],["title/#dbcontext-based-api",[7,0.058,8,0.068,9,0.423]],["text/#dbcontext-based-api",[3,1.068,7,0.106,8,0.073,9,0.658,10,0.499,11,0.846,12,0.243,14,0.739,15,1.068,16,1.068,17,1.068,18,1.255,19,1.068,23,0.739,24,0.739,25,0.739,26,0.455,27,0.658,28,1.068,29,1.068,30,1.255,31,0.739,32,0.351,33,0.772,34,0.772,35,0.739,36,0.658,37,0.658,38,0.739,39,1.068,40,1.068,41,0.739,42,1.634,43,1.374,44,0.351,45,0.351,46,0.965,47,0.739,48,1.634,49,1.255,50,1.374,51,1.068,52,0.739,53,1.255,54,1.66,55,0.898,56,1.068,57,1.255,58,1.255,59,0.243,60,0.739,61,1.068,62,1.374,63,0.739,64,0.455,65,0.846,66,0.935,67,0.846,68,0.658,69,0.59,70,0.658,71,0.658,72,0.898,73,1.068,74,1.068,75,1.255,76,1.068,77,1.068,78,0.988,79,0.658,80,0.898,81,1.068,82,0.658,83,1.068,84,1.068,85,0.739,86,0.739,87,0.739,88,0.739,89,0.739,90,0.455,91,0.455,92,0.455,93,0.739,94,0.739,95,0.739,96,0.739,97,0.739,98,0.658,99,1.068,100,1.068,101,0.739,102,1.068,103,0.739,104,1.255,105,0.739,106,1.068,107,1.068,108,0.412,109,0.739,110,0.739,111,0.455,112,0.739,113,0.739,114,0.739,115,0.739,116,0.739,117,0.739,118,0.739,119,0.739,120,0.243,121,0.739,122,0.739,123,0.739,124,0.739,125,0.739,126,0.739,127,1.068,128,0.739,129,0.739,130,0.739,131,0.739,132,0.739,133,0.739,134,0.739,135,0.455,136,0.739,137,0.739,138,0.739,139,0.739,140,0.739,141,0.739,142,0.739,143,0.739,144,0.739]],["title/#demo",[145,0.352]],["text/#demo",[135,0.882,145,0.471,146,1.433,147,1.433,148,0.882,149,1.433,150,1.433,151,0.882,152,1.433,153,1.433]],["title/#a-json-based-api",[7,0.058,8,0.068,20,0.423]],["text/#a-json-based-api",[7,0.099,8,0.116,10,0.545,11,0.721,12,0.385,13,1.171,20,0.897,21,0.721,27,0.721,32,0.385,44,0.595,45,0.521,59,0.385,69,0.385,90,0.897,98,0.976,108,0.385,120,0.561,154,0.897,155,1.171,156,0.721,157,1.171,158,0.976,159,0.897,160,1.021,161,0.897,162,0.976,163,1.457,164,1.171,165,1.171,166,1.171,167,1.171,168,1.171,169,1.171,170,0.721,171,1.171,172,0.721,173,1.171,174,1.171,175,1.457,176,1.457,177,1.457]],["title/#demo_1",[145,0.352]],["text/#demo_1",[7,0.092,10,0.503,12,0.357,21,0.669,26,0.669,32,0.357,33,0.669,34,0.943,36,0.669,37,0.856,44,0.531,45,0.357,46,0.856,55,0.669,59,0.357,64,0.669,65,0.856,66,0.856,67,0.856,68,0.669,69,0.561,70,0.669,71,0.669,72,0.856,78,1.027,79,0.669,80,0.994,82,0.669,91,0.994,92,0.856,108,0.503,111,0.856,120,0.357,148,0.669,151,0.856,154,0.669,156,0.669,158,0.669,159,0.669,160,0.669,161,0.669,162,0.669,170,0.669,172,0.994,178,1.087,179,1.087,180,1.39,181,1.087,182,1.087,183,1.39,184,1.087,185,1.087,186,1.087,187,1.087,188,1.087,189,1.39,190,1.39,191,1.087,192,1.39,193,1.087,194,1.087,195,1.087,196,1.087,197,1.087,198,1.087,199,1.087]]],"fields":["title","text"],"invertedIndex":[["\"/\"",{"_index":196,"text":{"":{},"#demo_1":{}},"title":{}}],["(",{"_index":46,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["()",{"_index":197,"text":{"":{},"#demo_1":{}},"title":{}}],["();",{"_index":80,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],[")",{"_index":51,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["));",{"_index":131,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],[");",{"_index":72,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],[",",{"_index":10,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],[".",{"_index":69,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["/api/address",{"_index":97,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["/api/contact",{"_index":84,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["/api/contacts/1",{"_index":87,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["/customers/{id}",{"_index":177,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["/products/{id}",{"_index":175,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["1",{"_index":161,"text":{"":{},"#a-json-based-api":{},"#demo_1":{}},"title":{}}],["2",{"_index":164,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["3",{"_index":166,"text":{"":{},"#a-json-based-api":{}},"title":{}}],[":",{"_index":44,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],[";",{"_index":190,"text":{"":{},"#demo_1":{}},"title":{}}],["<",{"_index":48,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["=",{"_index":67,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["=>",{"_index":55,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],[">",{"_index":49,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],[">(",{"_index":75,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],[">();",{"_index":57,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["[{",{"_index":159,"text":{"":{},"#a-json-based-api":{},"#demo_1":{}},"title":{}}],["abov",{"_index":171,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["add",{"_index":91,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["address",{"_index":58,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["addressbook",{"_index":104,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["addsqlit",{"_index":74,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["advantag",{"_index":150,"text":{"":{},"#demo":{}},"title":{}}],["alreadi",{"_index":179,"text":{"":{},"#demo_1":{}},"title":{}}],["api",{"_index":7,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{"#a-json-based-api":{},"#dbcontext-based-api":{}}}],["apimethodstogener",{"_index":103,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["apistogener",{"_index":130,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["app",{"_index":78,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["approach",{"_index":62,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["arg",{"_index":71,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["articl",{"_index":1,"text":{"":{}},"title":{}}],["assembl",{"_index":125,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["base",{"_index":8,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{}},"title":{"#a-json-based-api":{},"#dbcontext-based-api":{}}}],["between",{"_index":142,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["both",{"_index":40,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["build",{"_index":79,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["builder",{"_index":66,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["call",{"_index":96,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["cd",{"_index":186,"text":{"":{},"#demo_1":{}},"title":{}}],["check",{"_index":146,"text":{"":{},"#demo":{}},"title":{}}],["class",{"_index":16,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["code",{"_index":191,"text":{"":{},"#demo_1":{}},"title":{}}],["concept",{"_index":24,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["config",{"_index":100,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["contact",{"_index":54,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["contain",{"_index":2,"text":{"":{}},"title":{}}],["content",{"_index":156,"text":{"":{},"#a-json-based-api":{},"#demo_1":{}},"title":{}}],["context",{"_index":30,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["creat",{"_index":108,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["createbuild",{"_index":70,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["crud",{"_index":61,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["current",{"_index":35,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["custom",{"_index":98,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{}},"title":{}}],["customer1",{"_index":169,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["data",{"_index":76,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["databas",{"_index":15,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["db",{"_index":102,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["dbcontext",{"_index":9,"text":{"":{},"#dbcontext-based-api":{}},"title":{"#dbcontext-based-api":{}}}],["dbcontextopt",{"_index":47,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["dbset",{"_index":53,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["delet",{"_index":176,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["demo",{"_index":145,"text":{"":{},"#demo":{}},"title":{"#demo":{},"#demo_1":{}}}],["demoapi",{"_index":183,"text":{"":{},"#demo_1":{}},"title":{}}],["differ",{"_index":4,"text":{"":{}},"title":{}}],["don't",{"_index":178,"text":{"":{},"#demo_1":{}},"title":{}}],["dotnet",{"_index":180,"text":{"":{},"#demo_1":{}},"title":{}}],["each",{"_index":118,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["end",{"_index":122,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["endpoint",{"_index":27,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{}},"title":{}}],["entiti",{"_index":28,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["exampl",{"_index":111,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["extens",{"_index":119,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["f",{"_index":184,"text":{"":{},"#demo_1":{}},"title":{}}],["featur",{"_index":140,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["feel",{"_index":132,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["file",{"_index":21,"text":{"":{},"#a-json-based-api":{},"#demo_1":{}},"title":{}}],["filter",{"_index":85,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["first",{"_index":88,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["follow",{"_index":172,"text":{"":{},"#a-json-based-api":{},"#demo_1":{}},"title":{}}],["forseabl",{"_index":143,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["framework",{"_index":29,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["free",{"_index":133,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["fritz",{"_index":135,"text":{"":{},"#dbcontext-based-api":{},"#demo":{}},"title":{}}],["futur",{"_index":144,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["gener",{"_index":11,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{}},"title":{}}],["give",{"_index":148,"text":{"":{},"#demo":{},"#demo_1":{}},"title":{}}],["given",{"_index":14,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["hasn't",{"_index":115,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["hello",{"_index":198,"text":{"":{},"#demo_1":{}},"title":{}}],["here'",{"_index":193,"text":{"":{},"#demo_1":{}},"title":{}}],["home",{"_index":0,"text":{},"title":{"":{}}}],["http",{"_index":173,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["https://youtu.be/vcswxaoepbo",{"_index":153,"text":{"":{},"#demo":{}},"title":{}}],["id",{"_index":160,"text":{"":{},"#a-json-based-api":{},"#demo_1":{}},"title":{}}],["implement",{"_index":17,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["includ",{"_index":129,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["includet",{"_index":101,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["instant",{"_index":6,"text":{"":{}},"title":{}}],["instantapi",{"_index":151,"text":{"":{},"#demo":{},"#demo_1":{}},"title":{}}],["instantapisfordbcontext(typeof(mycontext))]",{"_index":126,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["instantapisfordbcontextattribut",{"_index":117,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["intent",{"_index":138,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["issu",{"_index":137,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["json",{"_index":20,"text":{"":{},"#a-json-based-api":{}},"title":{"#a-json-based-api":{}}}],["keep",{"_index":139,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["know",{"_index":136,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["let'",{"_index":38,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["librari",{"_index":25,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["look",{"_index":157,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["make",{"_index":94,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["map",{"_index":116,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["mapget",{"_index":195,"text":{"":{},"#demo_1":{}},"title":{}}],["mapinstantapi",{"_index":81,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["mapmycontexttoapi",{"_index":127,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["map{dbcontextname}toapi",{"_index":121,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["meat",{"_index":167,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["method",{"_index":107,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["minim",{"_index":26,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["mock",{"_index":189,"text":{"":{},"#demo_1":{}},"title":{}}],["mock.json",{"_index":154,"text":{"":{},"#a-json-based-api":{},"#demo_1":{}},"title":{}}],["moment",{"_index":114,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["multipl",{"_index":93,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["mycontext",{"_index":42,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["name",{"_index":120,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["namespac",{"_index":188,"text":{"":{},"#demo_1":{}},"title":{}}],["navig",{"_index":83,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["need",{"_index":13,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["net6.0",{"_index":185,"text":{"":{},"#demo_1":{}},"title":{}}],["new",{"_index":92,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["now",{"_index":32,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["nuget",{"_index":36,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["o",{"_index":182,"text":{"":{},"#demo_1":{}},"title":{}}],["on",{"_index":33,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["option",{"_index":50,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["out",{"_index":147,"text":{"":{},"#demo":{}},"title":{}}],["packag",{"_index":37,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["pariti",{"_index":141,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["pineappl",{"_index":165,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["pizza",{"_index":162,"text":{"":{},"#a-json-based-api":{},"#demo_1":{}},"title":{}}],["post",{"_index":90,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{}},"title":{}}],["prepend",{"_index":110,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["prereleas",{"_index":187,"text":{"":{},"#demo_1":{}},"title":{}}],["product",{"_index":158,"text":{"":{},"#a-json-based-api":{},"#demo_1":{}},"title":{}}],["program",{"_index":194,"text":{"":{},"#demo_1":{}},"title":{}}],["program.c",{"_index":64,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["project",{"_index":113,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["proof",{"_index":23,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["public",{"_index":43,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["reflect",{"_index":18,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["result",{"_index":123,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["return",{"_index":89,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["right",{"_index":31,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["rout",{"_index":12,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["run",{"_index":82,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["same",{"_index":95,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["see",{"_index":39,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["servic",{"_index":73,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["set",{"_index":56,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["show",{"_index":149,"text":{"":{},"#demo":{}},"title":{}}],["similar",{"_index":124,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["sourc",{"_index":19,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["source=contacts.db\"",{"_index":77,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["specif",{"_index":86,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["specifi",{"_index":106,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["standard",{"_index":60,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["syntax",{"_index":63,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["tabl",{"_index":109,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["try",{"_index":134,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["two",{"_index":3,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["typic",{"_index":155,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["us",{"_index":34,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["usejsonrout",{"_index":192,"text":{"":{},"#demo_1":{}},"title":{}}],["var",{"_index":65,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["verb",{"_index":174,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["wai",{"_index":5,"text":{"":{}},"title":{}}],["want",{"_index":99,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["web",{"_index":181,"text":{"":{},"#demo_1":{}},"title":{}}],["webappl",{"_index":68,"text":{"":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["well",{"_index":128,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["work",{"_index":41,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["workingapi.gener",{"_index":112,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["world",{"_index":199,"text":{"":{},"#demo_1":{}},"title":{}}],["youtub",{"_index":152,"text":{"":{},"#demo":{}},"title":{}}],["{",{"_index":45,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["{}",{"_index":52,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["}",{"_index":59,"text":{"":{},"#a-json-based-api":{},"#dbcontext-based-api":{},"#demo_1":{}},"title":{}}],["});",{"_index":105,"text":{"":{},"#dbcontext-based-api":{}},"title":{}}],["},",{"_index":163,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["}]",{"_index":170,"text":{"":{},"#a-json-based-api":{},"#demo_1":{}},"title":{}}],["}],",{"_index":168,"text":{"":{},"#a-json-based-api":{}},"title":{}}],["\u00b6",{"_index":22,"text":{"":{}},"title":{}}]],"pipeline":["stemmer"],"version":"2.3.8"}}